{
  "name": "pug-walk",
  "version": "1.0.0",
  "description": "Walk and transform a pug AST",
  "keywords": [
    "pug"
  ],
  "dependencies": {},
  "devDependencies": {
    "istanbul": "*",
    "pug-lexer": "^2.1.0",
    "pug-parser": "^2.0.1",
    "testit": "^2.1.2"
  },
  "scripts": {
    "test": "node test",
    "coverage": "istanbul cover test"
  },
  "files": [
    "index.js"
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/pugjs/pug-walk.git"
  },
  "author": {
    "name": "ForbesLindesay"
  },
  "license": "MIT",
  "readme": "# pug-walk\n\nWalk and transform a Pug AST\n\n[![Build Status](https://img.shields.io/travis/pugjs/pug-walk/master.svg)](https://travis-ci.org/pugjs/pug-walk)\n[![Dependency Status](https://img.shields.io/david/pugjs/pug-walk.svg)](https://david-dm.org/pugjs/pug-walk)\n[![npm version](https://img.shields.io/npm/v/pug-walk.svg)](https://www.npmjs.org/package/pug-walk)\n[![Coverage Status](https://img.shields.io/codecov/c/github/pugjs/pug-walk/master.svg)](https://codecov.io/gh/pugjs/pug-walk/branch/master)\n\n## Installation\n\n    npm install pug-walk\n\n## Usage\n\n```js\nvar walk = require('pug-walk');\n```\n\n### `walk(ast, before, after, options)`\n\nTraverse and optionally transform a Pug AST.\n\n`ast` is not cloned, so any changes done to it will be done directly on the AST provided.\n\n`before` and `after` are functions with the signature `(node, replace)`. `before` is called when a node is first seen, while `after` is called after the children of the node (if any) have already been traversed.\n\nThe `replace` parameter is a callback function that can be used to replace the node in the AST. `replace` can also be used to remove this node entirely or add new nodes, by calling `replace` with an array of nodes. This is only possible when the parent node is a Block, as indicated by the property `replace.arrayAllowed`. If it is not possible, and still `replace` is called with an array, `replace` will throw an error.\n\nIf `before` returns `false`, the children of this node will not be traversed and left unchanged (unless `replace` has been called). Otherwise, the returned value of `before` is ignored. The returned value of `after` is always ignored.\n\n`options` can contain the following properties:\n\n* `includeDependencies` (boolean): Walk the AST of a loaded dependent file (i.e., includes and extends). Defaults to `false`.\n* `parents` (array<ASTNode>): Nodes that are ancestors to the current `ast`. This option is used mainly internally, and users usually do not have to specify it. Defaults to `[]`.\n\n```js\nvar lex = require('pug-lexer');\nvar parse = require('pug-parser');\n\n// Changing content of all Text nodes\n// ==================================\n\nvar source = '.my-class foo';\nvar dest = '.my-class bar';\n\nvar ast = parse(lex(source));\n\nwalk(ast, function before(node, replace) {\n  if (node.type === 'Text') {\n    node.val = 'bar';\n\n    // Alternatively, you can replace the entire node\n    // rather than just the text.\n    // replace({ type: 'Text', val: 'bar', line: node.line });\n  }\n}, {\n  includeDependencies: true\n});\n\nassert.deepEqual(parse(lex(dest)), ast);\n\n// Convert all simple <strong> elements to text\n// ============================================\n\nvar source = 'p abc #[strong NO]\\nstrong on its own line';\nvar dest = 'p abc #[| NO]\\n| on its own line';\n\nvar ast = parse(lex(source));\n\nwalk(ast, function before(node, replace) {\n  // Find all <strong> tags\n  if (node.type === 'Tag' && node.name === 'strong') {\n    var children = node.block.nodes;\n\n    // Make sure that the Tag only has one child -- the text\n    if (children.length === 1 && children[0].type === 'Text') {\n      // Replace the Tag with the Text\n      replace({ type: 'Text', val: children[0].val, line: node.line });\n    }\n  }\n}, {\n  includeDependencies: true\n});\n\nassert.deepEqual(parse(lex(dest)), ast);\n\n// Flatten blocks\n// ==============\n\nvar ast = {\n  type: 'Block',\n  nodes: [\n    { type: 'Text', val: 'a' },\n    {\n      type: 'Block',\n      nodes: [\n        { type: 'Text', val: 'b' },\n        {\n          type: 'Block',\n          nodes: [ { type: 'Text', val: 'c' } ]\n        },\n        { type: 'Text', val: 'd' }\n      ]\n    },\n    { type: 'Text', val: 'e' }\n  ]\n};\n\nvar dest = {\n  type: 'Block',\n  nodes: [\n    { type: 'Text', val: 'a' },\n    { type: 'Text', val: 'b' },\n    { type: 'Text', val: 'c' },\n    { type: 'Text', val: 'd' },\n    { type: 'Text', val: 'e' }\n  ]\n};\n\n// We need to use `after` handler instead of `before`\n// handler because we want to flatten the innermost\n// blocks first before proceeding onto outer blocks.\n\nwalk(ast, null, function after(node, replace) {\n  if (node.type === 'Block' && replace.arrayAllowed) {\n    // Replace the block with its contents\n    replace(node.nodes);\n  }\n});\n\nassert.deepEqual(dest, ast);\n```\n\n## License\n\n  MIT\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/pugjs/pug-walk/issues"
  },
  "_id": "pug-walk@1.0.0",
  "dist": {
    "shasum": "66700741b6fad432f7b5b471ededd5a115295c09"
  },
  "_from": "pug-walk@^1.0.0",
  "_resolved": "https://registry.npmjs.org/pug-walk/-/pug-walk-1.0.0.tgz"
}
